name: CI/CD - Lint, Tests, Deploy Infra e Deploy App

on:
  push:
    branches:
      - main  # Ajuste para a branch desejada
      - staging
  workflow_dispatch:

jobs:

  # üõ†Ô∏è Etapa 1: Lint no c√≥digo Python
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Rodar Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # üß™ Etapa 2: Rodar testes automatizados
  tests:
    needs: lint
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8"]

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Rodar testes
        run: |
          python test.py

  # üöÄ Etapa 3: Provisionar Infra AWS com Terraform
  
  deploy_infra:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Regi√£o padr√£o, mas ser√° alterada dinamicamente

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Inicializar Terraform
        run: |
          cd infra
          terraform init

      - name: Aplicar Terraform (Ambiente correto)
        run: |
          cd infra
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            terraform apply -var-file=environments/prd.tfvars -auto-approve
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            terraform apply -var-file=environments/hml.tfvars -auto-approve
          fi


  # üéØ Etapa 4: Build, Upload para S3 e Deploy no Beanstalk
  deploy_app:
    needs: deploy_infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Criar pacote ZIP da aplica√ß√£o
        run: |
          zip -r app.zip src/backend -x "*.git*"

      - name: Upload para S3
        run: |
          aws s3 cp app.zip s3://${{ secrets.S3_BUCKET }}/app.zip

      - name: Criar nova vers√£o da aplica√ß√£o no Elastic Beanstalk
        run: |
          FILE_NAME=app-$(date +%Y%m%d%H%M%S).zip
          aws elasticbeanstalk create-application-version \
            --application-name meu-app \
            --version-label $FILE_NAME \
            --source-bundle S3Bucket=${{ secrets.S3_BUCKET }},S3Key=$FILE_NAME

      - name: Atualizar ambiente do Elastic Beanstalk
        run: |
          FILE_NAME=app-$(date +%Y%m%d%H%M%S).zip
          aws elasticbeanstalk update-environment \
            --environment-name meu-app-env \
            --version-label $FILE_NAME


  destroy_infra:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Apenas quando acionado manualmente
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Regi√£o padr√£o, mas ser√° alterada dinamicamente

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Inicializar Terraform
        run: |
          cd infra
          terraform init

      - name: Aplicar Terraform (Ambiente correto)
        run: |
          cd infra
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            terraform destroy -var-file=environments/prd.tfvars -auto-approve
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            terraform destroy -var-file=environments/hml.tfvars -auto-approve
          fi
